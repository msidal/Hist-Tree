<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>malloc (6,081,183 samples, 0.98%)</title><rect x="572.6" y="229" width="11.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="575.55" y="239.5" ></text>
</g>
<g >
<title>operator delete (644,212 samples, 0.10%)</title><rect x="654.3" y="245" width="1.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="657.27" y="255.5" ></text>
</g>
<g >
<title>mmap64 (1,236,703 samples, 0.20%)</title><rect x="11.3" y="213" width="2.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="14.31" y="223.5" ></text>
</g>
<g >
<title>malloc (7,989,418 samples, 1.28%)</title><rect x="334.3" y="213" width="15.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="337.27" y="223.5" ></text>
</g>
<g >
<title>free@plt (719,699 samples, 0.12%)</title><rect x="886.0" y="261" width="1.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="888.96" y="271.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (89,933 samples, 0.01%)</title><rect x="1189.8" y="277" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1192.83" y="287.5" ></text>
</g>
<g >
<title>alloc_perturb (741,432 samples, 0.12%)</title><rect x="987.2" y="213" width="1.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="990.24" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;std::tuple&lt;std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;, unsigned long, unsigned long&gt; &gt; &gt;::~deque (3,980,933 samples, 0.64%)</title><rect x="922.2" y="277" width="7.5" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="925.20" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (89,933 samples, 0.01%)</title><rect x="1189.8" y="341" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.83" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_execve (688,833 samples, 0.11%)</title><rect x="10.0" y="293" width="1.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;*&gt; (19,387,721 samples, 3.11%)</title><rect x="673.2" y="245" width="36.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="676.23" y="255.5" >voi..</text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::dynamic_bitset (28,247,134 samples, 4.54%)</title><rect x="295.9" y="261" width="53.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="298.88" y="271.5" >boost..</text>
</g>
<g >
<title>operator new (1,588,385 samples, 0.26%)</title><rect x="311.7" y="245" width="3.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="314.68" y="255.5" ></text>
</g>
<g >
<title>_int_free (8,087,754 samples, 1.30%)</title><rect x="1162.7" y="277" width="15.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1165.68" y="287.5" ></text>
</g>
<g >
<title>operator delete (2,164,891 samples, 0.35%)</title><rect x="815.8" y="277" width="4.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="818.77" y="287.5" ></text>
</g>
<g >
<title>elf_load (688,833 samples, 0.11%)</title><rect x="10.0" y="181" width="1.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>[unknown] (688,833 samples, 0.11%)</title><rect x="10.0" y="357" width="1.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;::push_back (1,535,593 samples, 0.25%)</title><rect x="929.7" y="277" width="3.0" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="932.75" y="287.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (7,835,792 samples, 1.26%)</title><rect x="248.0" y="245" width="14.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="251.00" y="255.5" ></text>
</g>
<g >
<title>vm_munmap (688,833 samples, 0.11%)</title><rect x="10.0" y="165" width="1.3" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>__run_exit_handlers (803,760 samples, 0.13%)</title><rect x="19.5" y="293" width="1.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="22.52" y="303.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (786,299 samples, 0.13%)</title><rect x="472.5" y="149" width="1.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="475.51" y="159.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,379,184 samples, 1.67%)</title><rect x="851.9" y="261" width="19.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="854.93" y="271.5" ></text>
</g>
<g >
<title>mprotect_fixup (1,181,890 samples, 0.19%)</title><rect x="16.0" y="197" width="2.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="18.99" y="207.5" ></text>
</g>
<g >
<title>vm_area_dup (1,181,890 samples, 0.19%)</title><rect x="16.0" y="149" width="2.2" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="18.99" y="159.5" ></text>
</g>
<g >
<title>malloc (777,548 samples, 0.12%)</title><rect x="991.5" y="245" width="1.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="994.50" y="255.5" ></text>
</g>
<g >
<title>operator new (8,146,404 samples, 1.31%)</title><rect x="819.9" y="277" width="15.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="822.88" y="287.5" ></text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (618,198,697 samples, 99.29%)</title><rect x="18.2" y="341" width="1171.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="21.23" y="351.5" >__libc_start_main@@GLIBC_2.34</text>
</g>
<g >
<title>malloc (841,271 samples, 0.14%)</title><rect x="841.4" y="245" width="1.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="844.36" y="255.5" ></text>
</g>
<g >
<title>native_apic_msr_eoi (719,718 samples, 0.12%)</title><rect x="725.6" y="245" width="1.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="728.63" y="255.5" ></text>
</g>
<g >
<title>_int_free (7,095,829 samples, 1.14%)</title><rect x="908.8" y="229" width="13.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="911.75" y="239.5" ></text>
</g>
<g >
<title>[unknown] (89,933 samples, 0.01%)</title><rect x="1189.8" y="357" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.83" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (688,833 samples, 0.11%)</title><rect x="10.0" y="341" width="1.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>malloc (13,623,986 samples, 2.19%)</title><rect x="270.1" y="229" width="25.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="273.06" y="239.5" >m..</text>
</g>
<g >
<title>begin_new_exec (89,933 samples, 0.01%)</title><rect x="1189.8" y="181" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1192.83" y="191.5" ></text>
</g>
<g >
<title>__split_vma (1,181,890 samples, 0.19%)</title><rect x="16.0" y="165" width="2.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="18.99" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (720,299 samples, 0.12%)</title><rect x="1071.7" y="277" width="1.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1074.73" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (786,299 samples, 0.13%)</title><rect x="472.5" y="213" width="1.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="475.51" y="223.5" ></text>
</g>
<g >
<title>_dl_start_user (3,655,216 samples, 0.59%)</title><rect x="11.3" y="357" width="6.9" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="14.31" y="367.5" ></text>
</g>
<g >
<title>search_binary_handler (89,933 samples, 0.01%)</title><rect x="1189.8" y="213" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.83" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (5,225,067 samples, 0.84%)</title><rect x="766.8" y="229" width="9.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="769.75" y="239.5" ></text>
</g>
<g >
<title>malloc (4,865,135 samples, 0.78%)</title><rect x="826.1" y="261" width="9.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="829.09" y="271.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (1,181,890 samples, 0.19%)</title><rect x="16.0" y="213" width="2.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="18.99" y="223.5" ></text>
</g>
<g >
<title>ptep_clear_flush (1,236,623 samples, 0.20%)</title><rect x="13.6" y="149" width="2.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="16.65" y="159.5" ></text>
</g>
<g >
<title>operator new (2,281,594 samples, 0.37%)</title><rect x="988.6" y="261" width="4.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="991.65" y="271.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (12,140,441 samples, 1.95%)</title><rect x="399.5" y="245" width="23.0" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="402.53" y="255.5" >c..</text>
</g>
<g >
<title>operator new (6,997,049 samples, 1.12%)</title><rect x="553.6" y="261" width="13.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="556.65" y="271.5" ></text>
</g>
<g >
<title>_start (618,198,697 samples, 99.29%)</title><rect x="18.2" y="357" width="1171.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="21.23" y="367.5" >_start</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (14,344,556 samples, 2.30%)</title><rect x="895.0" y="245" width="27.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="898.02" y="255.5" >c..</text>
</g>
<g >
<title>exec_binprm (688,833 samples, 0.11%)</title><rect x="10.0" y="229" width="1.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (89,933 samples, 0.01%)</title><rect x="1189.8" y="245" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1192.83" y="255.5" ></text>
</g>
<g >
<title>malloc (1,435,626 samples, 0.23%)</title><rect x="736.1" y="261" width="2.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="739.11" y="271.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (15,434,669 samples, 2.48%)</title><rect x="680.7" y="229" width="29.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="683.72" y="239.5" >cf..</text>
</g>
<g >
<title>native_flush_tlb_one_user (1,236,623 samples, 0.20%)</title><rect x="13.6" y="101" width="2.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="16.65" y="111.5" ></text>
</g>
<g >
<title>malloc_consolidate (33,259,955 samples, 5.34%)</title><rect x="1008.7" y="213" width="63.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1011.70" y="223.5" >malloc..</text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; const*, std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt; &gt;, boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;*&gt; (28,810,786 samples, 4.63%)</title><rect x="934.0" y="261" width="54.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="937.05" y="271.5" >boost..</text>
</g>
<g >
<title>_dl_catch_exception (1,236,703 samples, 0.20%)</title><rect x="11.3" y="277" width="2.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="14.31" y="287.5" ></text>
</g>
<g >
<title>x64_sys_call (89,933 samples, 0.01%)</title><rect x="1189.8" y="309" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1192.83" y="319.5" ></text>
</g>
<g >
<title>_int_free (3,040,922 samples, 0.49%)</title><rect x="853.1" y="245" width="5.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="856.12" y="255.5" ></text>
</g>
<g >
<title>operator new (23,486,022 samples, 3.77%)</title><rect x="944.1" y="245" width="44.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="947.14" y="255.5" >oper..</text>
</g>
<g >
<title>handle_pte_fault (1,236,623 samples, 0.20%)</title><rect x="13.6" y="197" width="2.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="16.65" y="207.5" ></text>
</g>
<g >
<title>operator new (837,984 samples, 0.13%)</title><rect x="89.0" y="261" width="1.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="91.95" y="271.5" ></text>
</g>
<g >
<title>malloc (1,680,173 samples, 0.27%)</title><rect x="422.5" y="245" width="3.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="425.54" y="255.5" ></text>
</g>
<g >
<title>operator new (37,413,032 samples, 6.01%)</title><rect x="1000.8" y="261" width="70.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1003.83" y="271.5" >operator..</text>
</g>
<g >
<title>_int_free (827,394 samples, 0.13%)</title><rect x="1153.0" y="293" width="1.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1155.98" y="303.5" ></text>
</g>
<g >
<title>uprobe_mmap (1,236,703 samples, 0.20%)</title><rect x="11.3" y="37" width="2.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="14.31" y="47.5" ></text>
</g>
<g >
<title>operator new (9,359,242 samples, 1.50%)</title><rect x="655.5" y="245" width="17.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="658.50" y="255.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (719,718 samples, 0.12%)</title><rect x="725.6" y="261" width="1.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="728.63" y="271.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;* std::__do_uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; const*, std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt; &gt;, boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;*&gt; (26,205,448 samples, 4.21%)</title><rect x="727.0" y="277" width="49.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="729.99" y="287.5" >boost..</text>
</g>
<g >
<title>__handle_mm_fault (1,236,623 samples, 0.20%)</title><rect x="13.6" y="213" width="2.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="16.65" y="223.5" ></text>
</g>
<g >
<title>operator new (805,507 samples, 0.13%)</title><rect x="838.3" y="261" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="841.35" y="271.5" ></text>
</g>
<g >
<title>update_process_times (786,299 samples, 0.13%)</title><rect x="472.5" y="101" width="1.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="475.51" y="111.5" ></text>
</g>
<g >
<title>dl_main (3,655,216 samples, 0.59%)</title><rect x="11.3" y="309" width="6.9" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="14.31" y="319.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (786,299 samples, 0.13%)</title><rect x="472.5" y="197" width="1.5" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="475.51" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;::vector (765,934 samples, 0.12%)</title><rect x="1187.1" y="293" width="1.5" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1190.14" y="303.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;*&gt; (18,403,058 samples, 2.96%)</title><rect x="887.3" y="261" width="34.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="890.33" y="271.5" >vo..</text>
</g>
<g >
<title>free@plt (744,383 samples, 0.12%)</title><rect x="547.5" y="261" width="1.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="550.53" y="271.5" ></text>
</g>
<g >
<title>mprotect (1,181,890 samples, 0.19%)</title><rect x="16.0" y="293" width="2.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="18.99" y="303.5" ></text>
</g>
<g >
<title>bprm_execve (688,833 samples, 0.11%)</title><rect x="10.0" y="261" width="1.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>__ieee754_pow_fma (4,499,628 samples, 0.72%)</title><rect x="710.0" y="277" width="8.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="712.98" y="287.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (1,236,623 samples, 0.20%)</title><rect x="13.6" y="133" width="2.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="16.65" y="143.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5,443,452 samples, 0.87%)</title><rect x="213.6" y="261" width="10.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="216.63" y="271.5" ></text>
</g>
<g >
<title>_int_free (715,763 samples, 0.11%)</title><rect x="922.2" y="261" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="925.20" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (18,318,842 samples, 2.94%)</title><rect x="314.7" y="245" width="34.7" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="317.69" y="255.5" >st..</text>
</g>
<g >
<title>_dl_start (3,655,216 samples, 0.59%)</title><rect x="11.3" y="341" width="6.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="14.31" y="351.5" ></text>
</g>
<g >
<title>tick_sched_handle (786,299 samples, 0.13%)</title><rect x="472.5" y="117" width="1.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="475.51" y="127.5" ></text>
</g>
<g >
<title>load_elf_binary (688,833 samples, 0.11%)</title><rect x="10.0" y="197" width="1.3" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>_int_malloc (16,499,647 samples, 2.65%)</title><rect x="956.0" y="213" width="31.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="958.97" y="223.5" >_i..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (719,718 samples, 0.12%)</title><rect x="725.6" y="277" width="1.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="728.63" y="287.5" ></text>
</g>
<g >
<title>_int_free (3,747,751 samples, 0.60%)</title><rect x="641.4" y="229" width="7.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="644.36" y="239.5" ></text>
</g>
<g >
<title>malloc (17,658,366 samples, 2.84%)</title><rect x="743.2" y="245" width="33.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="746.19" y="255.5" >ma..</text>
</g>
<g >
<title>x86_pmu_disable (786,299 samples, 0.13%)</title><rect x="472.5" y="53" width="1.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="475.51" y="63.5" ></text>
</g>
<g >
<title>x64_sys_call (1,236,703 samples, 0.20%)</title><rect x="11.3" y="165" width="2.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="14.31" y="175.5" ></text>
</g>
<g >
<title>malloc@plt (736,661 samples, 0.12%)</title><rect x="652.9" y="245" width="1.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="655.88" y="255.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (4,145,461 samples, 0.67%)</title><rect x="474.0" y="261" width="7.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="477.00" y="271.5" ></text>
</g>
<g >
<title>malloc (826,505 samples, 0.13%)</title><rect x="1179.6" y="293" width="1.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1182.60" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (89,933 samples, 0.01%)</title><rect x="1189.8" y="325" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.83" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1,236,703 samples, 0.20%)</title><rect x="11.3" y="149" width="2.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="14.31" y="159.5" ></text>
</g>
<g >
<title>operator new (7,989,418 samples, 1.28%)</title><rect x="334.3" y="229" width="15.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="337.27" y="239.5" ></text>
</g>
<g >
<title>perf_iterate_sb.constprop.0 (81,281 samples, 0.01%)</title><rect x="1189.8" y="117" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1192.83" y="127.5" ></text>
</g>
<g >
<title>search_binary_handler (688,833 samples, 0.11%)</title><rect x="10.0" y="213" width="1.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (786,299 samples, 0.13%)</title><rect x="472.5" y="133" width="1.5" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="475.51" y="143.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (688,833 samples, 0.11%)</title><rect x="10.0" y="277" width="1.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>pow@@GLIBC_2.29 (835,404 samples, 0.13%)</title><rect x="835.3" y="277" width="1.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="838.31" y="287.5" ></text>
</g>
<g >
<title>operator new (838,534 samples, 0.13%)</title><rect x="871.6" y="261" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="874.60" y="271.5" ></text>
</g>
<g >
<title>malloc (1,643,007 samples, 0.26%)</title><rect x="262.8" y="245" width="3.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="265.85" y="255.5" ></text>
</g>
<g >
<title>malloc (21,148,612 samples, 3.40%)</title><rect x="948.6" y="229" width="40.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="951.57" y="239.5" >mal..</text>
</g>
<g >
<title>flush_tlb_func (1,236,623 samples, 0.20%)</title><rect x="13.6" y="117" width="2.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="16.65" y="127.5" ></text>
</g>
<g >
<title>do_wp_page (1,236,623 samples, 0.20%)</title><rect x="13.6" y="181" width="2.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="16.65" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (803,760 samples, 0.13%)</title><rect x="19.5" y="309" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="22.52" y="319.5" ></text>
</g>
<g >
<title>pow@plt (841,484 samples, 0.14%)</title><rect x="1185.5" y="293" width="1.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1188.55" y="303.5" ></text>
</g>
<g >
<title>Builder&lt;unsigned int&gt;::Builder (1,659,599 samples, 0.27%)</title><rect x="28.5" y="293" width="3.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="31.53" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_execve (89,933 samples, 0.01%)</title><rect x="1189.8" y="293" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1192.83" y="303.5" ></text>
</g>
<g >
<title>malloc (5,359,293 samples, 0.86%)</title><rect x="663.1" y="229" width="10.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="666.08" y="239.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1,236,623 samples, 0.20%)</title><rect x="13.6" y="245" width="2.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="16.65" y="255.5" ></text>
</g>
<g >
<title>memset@plt (841,108 samples, 0.14%)</title><rect x="548.9" y="261" width="1.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="551.95" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;::push_back (9,058,430 samples, 1.45%)</title><rect x="566.9" y="261" width="17.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="569.91" y="271.5" ></text>
</g>
<g >
<title>__vm_munmap (688,833 samples, 0.11%)</title><rect x="10.0" y="149" width="1.3" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>perf_event_task_tick (786,299 samples, 0.13%)</title><rect x="472.5" y="69" width="1.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="475.51" y="79.5" ></text>
</g>
<g >
<title>_int_free_maybe_consolidate (3,722,812 samples, 0.60%)</title><rect x="858.9" y="245" width="7.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="861.89" y="255.5" ></text>
</g>
<g >
<title>log@@GLIBC_2.29 (841,120 samples, 0.14%)</title><rect x="1178.0" y="293" width="1.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1181.01" y="303.5" ></text>
</g>
<g >
<title>__libc_start_call_main (618,198,697 samples, 99.29%)</title><rect x="18.2" y="325" width="1171.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="21.23" y="335.5" >__libc_start_call_main</text>
</g>
<g >
<title>std::_Deque_base&lt;std::tuple&lt;std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;, unsigned long, unsigned long&gt; &gt; &gt;::_M_create_nodes (6,363,572 samples, 1.02%)</title><rect x="839.9" y="261" width="12.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="842.87" y="271.5" ></text>
</g>
<g >
<title>openaux (1,236,703 samples, 0.20%)</title><rect x="11.3" y="261" width="2.3" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="14.31" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (1,181,890 samples, 0.19%)</title><rect x="16.0" y="229" width="2.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="18.99" y="239.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator&gt;&gt; (65,742,137 samples, 10.56%)</title><rect x="349.4" y="261" width="124.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="352.41" y="271.5" >boost::dynamic_..</text>
</g>
<g >
<title>handle_mm_fault (1,236,623 samples, 0.20%)</title><rect x="13.6" y="229" width="2.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="16.65" y="239.5" ></text>
</g>
<g >
<title>operator new (3,810,992 samples, 0.61%)</title><rect x="621.6" y="229" width="7.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="624.60" y="239.5" ></text>
</g>
<g >
<title>exec_binprm (89,933 samples, 0.01%)</title><rect x="1189.8" y="229" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1192.83" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3,758,516 samples, 0.60%)</title><rect x="718.5" y="277" width="7.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="721.50" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;std::tuple&lt;std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;, unsigned long, unsigned long&gt; &gt; &gt;::pop_front (25,860,288 samples, 4.15%)</title><rect x="873.2" y="277" width="49.0" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="876.19" y="287.5" >std:..</text>
</g>
<g >
<title>all (622,632,679 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>operator new (15,784,846 samples, 2.54%)</title><rect x="266.0" y="245" width="29.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="268.96" y="255.5" >op..</text>
</g>
<g >
<title>operator new (651,785 samples, 0.10%)</title><rect x="1188.6" y="309" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1191.59" y="319.5" ></text>
</g>
<g >
<title>operator new (6,081,183 samples, 0.98%)</title><rect x="572.6" y="245" width="11.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="575.55" y="255.5" ></text>
</g>
<g >
<title>scheduler_tick (786,299 samples, 0.13%)</title><rect x="472.5" y="85" width="1.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="475.51" y="95.5" ></text>
</g>
<g >
<title>_dl_map_object_from_fd (1,236,703 samples, 0.20%)</title><rect x="11.3" y="229" width="2.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="14.31" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (3,817,444 samples, 0.61%)</title><rect x="179.6" y="261" width="7.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="182.63" y="271.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1,236,703 samples, 0.20%)</title><rect x="11.3" y="117" width="2.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="14.31" y="127.5" ></text>
</g>
<g >
<title>_int_malloc (35,768,691 samples, 5.74%)</title><rect x="1003.9" y="229" width="67.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1006.94" y="239.5" >_int_ma..</text>
</g>
<g >
<title>malloc (3,004,604 samples, 0.48%)</title><rect x="623.1" y="213" width="5.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="626.13" y="223.5" ></text>
</g>
<g >
<title>operator new (815,730 samples, 0.13%)</title><rect x="178.1" y="261" width="1.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="181.08" y="271.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (786,299 samples, 0.13%)</title><rect x="472.5" y="165" width="1.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="475.51" y="175.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (803,760 samples, 0.13%)</title><rect x="19.5" y="261" width="1.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="22.52" y="271.5" ></text>
</g>
<g >
<title>_dl_map_object_deps (1,236,703 samples, 0.20%)</title><rect x="11.3" y="293" width="2.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="14.31" y="303.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,126,598 samples, 0.34%)</title><rect x="881.9" y="261" width="4.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="884.93" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,236,703 samples, 0.20%)</title><rect x="11.3" y="181" width="2.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="14.31" y="191.5" ></text>
</g>
<g >
<title>_int_free (1,446,444 samples, 0.23%)</title><rect x="883.2" y="245" width="2.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="886.22" y="255.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (786,299 samples, 0.13%)</title><rect x="472.5" y="181" width="1.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="475.51" y="191.5" ></text>
</g>
<g >
<title>operator new (1,584,096 samples, 0.25%)</title><rect x="1182.5" y="293" width="3.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1185.55" y="303.5" ></text>
</g>
<g >
<title>malloc (833,161 samples, 0.13%)</title><rect x="814.2" y="277" width="1.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="817.19" y="287.5" ></text>
</g>
<g >
<title>vma_expand (1,236,703 samples, 0.20%)</title><rect x="11.3" y="69" width="2.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="14.31" y="79.5" ></text>
</g>
<g >
<title>std::deque&lt;std::tuple&lt;std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;, unsigned long, unsigned long&gt; &gt; &gt;::_M_destroy_data_aux (840,353 samples, 0.13%)</title><rect x="928.2" y="261" width="1.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="931.15" y="271.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,366,066 samples, 1.66%)</title><rect x="628.8" y="245" width="19.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="631.82" y="255.5" ></text>
</g>
<g >
<title>perf_event_comm_event.constprop.0 (81,281 samples, 0.01%)</title><rect x="1189.8" y="133" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1192.83" y="143.5" ></text>
</g>
<g >
<title>__ieee754_log_fma (7,216,265 samples, 1.16%)</title><rect x="1139.3" y="293" width="13.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1142.30" y="303.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;*&gt; (1,612,154 samples, 0.26%)</title><rect x="584.1" y="261" width="3.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="587.08" y="271.5" ></text>
</g>
<g >
<title>_fini (803,760 samples, 0.13%)</title><rect x="19.5" y="277" width="1.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="22.52" y="287.5" ></text>
</g>
<g >
<title>_int_free (770,199 samples, 0.12%)</title><rect x="893.6" y="245" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="896.56" y="255.5" ></text>
</g>
<g >
<title>malloc@plt (1,362,998 samples, 0.22%)</title><rect x="425.7" y="245" width="2.6" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="428.72" y="255.5" ></text>
</g>
<g >
<title>load_elf_binary (89,933 samples, 0.01%)</title><rect x="1189.8" y="197" width="0.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="1192.83" y="207.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,424,817 samples, 0.39%)</title><rect x="923.6" y="261" width="4.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="926.56" y="271.5" ></text>
</g>
<g >
<title>operator delete (728,133 samples, 0.12%)</title><rect x="1181.2" y="293" width="1.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1184.17" y="303.5" ></text>
</g>
<g >
<title>main (616,065,820 samples, 98.95%)</title><rect x="21.0" y="309" width="1167.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="24.04" y="319.5" >main</text>
</g>
<g >
<title>malloc (805,507 samples, 0.13%)</title><rect x="838.3" y="245" width="1.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="841.35" y="255.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1,236,703 samples, 0.20%)</title><rect x="11.3" y="133" width="2.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.31" y="143.5" ></text>
</g>
<g >
<title>_int_free (739,415 samples, 0.12%)</title><rect x="228.4" y="261" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="231.40" y="271.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; boost::operator&amp;&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; (34,863,865 samples, 5.60%)</title><rect x="229.8" y="261" width="66.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="232.80" y="271.5" >boost::..</text>
</g>
<g >
<title>malloc (1,614,306 samples, 0.26%)</title><rect x="649.8" y="245" width="3.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="652.82" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_default_append (41,555,806 samples, 6.67%)</title><rect x="993.0" y="277" width="78.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="995.97" y="287.5" >std::vect..</text>
</g>
<g >
<title>std::__shrink_to_fit_aux&lt;std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;, true&gt;::_S_do_it (11,217,718 samples, 1.80%)</title><rect x="851.9" y="277" width="21.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="854.93" y="287.5" >s..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (696,074 samples, 0.11%)</title><rect x="176.8" y="261" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="179.77" y="271.5" ></text>
</g>
<g >
<title>hist-tree (622,542,746 samples, 99.99%)</title><rect x="10.0" y="373" width="1179.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >hist-tree</text>
</g>
<g >
<title>vma_complete (1,236,703 samples, 0.20%)</title><rect x="11.3" y="53" width="2.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="14.31" y="63.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (2,960,917 samples, 0.48%)</title><rect x="1066.1" y="197" width="5.6" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1069.12" y="207.5" ></text>
</g>
<g >
<title>operator new (24,111,555 samples, 3.87%)</title><rect x="428.3" y="245" width="45.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="431.31" y="255.5" >oper..</text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator&gt;&gt; (819,838 samples, 0.13%)</title><rect x="776.7" y="277" width="1.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="779.66" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,181,890 samples, 0.19%)</title><rect x="16.0" y="277" width="2.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="18.99" y="287.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (12,378,985 samples, 1.99%)</title><rect x="1154.5" y="293" width="23.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1157.55" y="303.5" >c..</text>
</g>
<g >
<title>do_syscall_64 (1,181,890 samples, 0.19%)</title><rect x="16.0" y="261" width="2.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="18.99" y="271.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (16,531,811 samples, 2.66%)</title><rect x="778.2" y="277" width="31.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="781.21" y="287.5" >cf..</text>
</g>
<g >
<title>_int_free (1,649,519 samples, 0.26%)</title><rect x="925.0" y="245" width="3.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="928.03" y="255.5" ></text>
</g>
<g >
<title>_int_free (7,314,399 samples, 1.17%)</title><rect x="795.7" y="261" width="13.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="798.68" y="271.5" ></text>
</g>
<g >
<title>void std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; const&amp;&gt; (64,819,235 samples, 10.41%)</title><rect x="587.1" y="261" width="122.9" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="590.13" y="271.5" >void std::vecto..</text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (34,654,413 samples, 5.57%)</title><rect x="481.9" y="261" width="65.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="484.86" y="271.5" >cfree@G..</text>
</g>
<g >
<title>do_mmap (1,236,703 samples, 0.20%)</title><rect x="11.3" y="101" width="2.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="14.31" y="111.5" ></text>
</g>
<g >
<title>malloc (4,736,091 samples, 0.76%)</title><rect x="843.0" y="229" width="8.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="845.96" y="239.5" ></text>
</g>
<g >
<title>Builder&lt;unsigned int&gt;::Builder (677,332 samples, 0.11%)</title><rect x="18.2" y="309" width="1.3" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="21.23" y="319.5" ></text>
</g>
<g >
<title>_dl_relocate_object (1,236,623 samples, 0.20%)</title><rect x="13.6" y="293" width="2.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="16.65" y="303.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (688,833 samples, 0.11%)</title><rect x="10.0" y="245" width="1.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (28,833,315 samples, 4.63%)</title><rect x="1084.7" y="261" width="54.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1087.66" y="271.5" >cfree..</text>
</g>
<g >
<title>operator new (2,409,933 samples, 0.39%)</title><rect x="182.3" y="245" width="4.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="185.30" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;std::tuple&lt;std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;, unsigned long, unsigned long&gt;, std::allocator&lt;std::tuple&lt;std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;, unsigned long, unsigned long&gt; &gt; &gt;::_M_initialize_map (7,933,435 samples, 1.27%)</title><rect x="836.9" y="277" width="15.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="839.90" y="287.5" ></text>
</g>
<g >
<title>mas_store_gfp (688,833 samples, 0.11%)</title><rect x="10.0" y="117" width="1.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>_int_free (5,759,161 samples, 0.92%)</title><rect x="411.6" y="229" width="10.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="414.62" y="239.5" ></text>
</g>
<g >
<title>operator new (4,736,091 samples, 0.76%)</title><rect x="843.0" y="245" width="8.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="845.96" y="255.5" ></text>
</g>
<g >
<title>_int_free (21,943,707 samples, 3.52%)</title><rect x="505.9" y="245" width="41.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="508.95" y="255.5" >_in..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,236,703 samples, 0.20%)</title><rect x="11.3" y="197" width="2.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.31" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;::vector (31,826,189 samples, 5.11%)</title><rect x="932.7" y="277" width="60.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="935.66" y="287.5" >std::v..</text>
</g>
<g >
<title>sync_regs (704,664 samples, 0.11%)</title><rect x="1138.0" y="229" width="1.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1140.97" y="239.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (3,655,216 samples, 0.59%)</title><rect x="11.3" y="325" width="6.9" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="14.31" y="335.5" ></text>
</g>
<g >
<title>perf-exec (89,933 samples, 0.01%)</title><rect x="1189.8" y="373" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1192.83" y="383.5" ></text>
</g>
<g >
<title>exc_page_fault (1,236,623 samples, 0.20%)</title><rect x="13.6" y="261" width="2.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="16.65" y="271.5" ></text>
</g>
<g >
<title>_dl_map_object (1,236,703 samples, 0.20%)</title><rect x="11.3" y="245" width="2.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="14.31" y="255.5" ></text>
</g>
<g >
<title>_int_free (3,967,202 samples, 0.64%)</title><rect x="255.3" y="229" width="7.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="258.33" y="239.5" ></text>
</g>
<g >
<title>operator delete (1,640,752 samples, 0.26%)</title><rect x="550.5" y="261" width="3.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="553.54" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2,352,035 samples, 0.38%)</title><rect x="223.9" y="261" width="4.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="226.94" y="271.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1,236,623 samples, 0.20%)</title><rect x="13.6" y="277" width="2.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="16.65" y="287.5" ></text>
</g>
<g >
<title>malloc (37,413,032 samples, 6.01%)</title><rect x="1000.8" y="245" width="70.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1003.83" y="255.5" >malloc</text>
</g>
<g >
<title>malloc (21,733,113 samples, 3.49%)</title><rect x="432.8" y="229" width="41.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="435.81" y="239.5" >mal..</text>
</g>
<g >
<title>_int_free (733,977 samples, 0.12%)</title><rect x="610.6" y="245" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="613.60" y="255.5" ></text>
</g>
<g >
<title>free@plt (2,455,980 samples, 0.39%)</title><rect x="809.5" y="277" width="4.7" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="812.54" y="287.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;* std::__do_uninit_copy&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; const*, boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;*&gt; (8,882,210 samples, 1.43%)</title><rect x="612.0" y="245" width="16.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="614.99" y="255.5" ></text>
</g>
<g >
<title>vma_modify (1,181,890 samples, 0.19%)</title><rect x="16.0" y="181" width="2.2" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="18.99" y="191.5" ></text>
</g>
<g >
<title>x64_sys_call (1,181,890 samples, 0.19%)</title><rect x="16.0" y="245" width="2.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="18.99" y="255.5" ></text>
</g>
<g >
<title>perf_event_comm (81,281 samples, 0.01%)</title><rect x="1189.8" y="149" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1192.83" y="159.5" ></text>
</g>
<g >
<title>malloc (742,607 samples, 0.12%)</title><rect x="1184.1" y="277" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1187.14" y="287.5" ></text>
</g>
<g >
<title>_int_free_merge_chunk (2,986,891 samples, 0.48%)</title><rect x="865.9" y="245" width="5.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="868.94" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (688,833 samples, 0.11%)</title><rect x="10.0" y="325" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>free@plt (714,223 samples, 0.11%)</title><rect x="648.5" y="245" width="1.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="651.47" y="255.5" ></text>
</g>
<g >
<title>Builder&lt;unsigned int&gt;::build (584,445,950 samples, 93.87%)</title><rect x="31.7" y="293" width="1107.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="34.67" y="303.5" >Builder&lt;unsigned int&gt;::build</text>
</g>
<g >
<title>__set_task_comm (81,281 samples, 0.01%)</title><rect x="1189.8" y="165" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1192.83" y="175.5" ></text>
</g>
<g >
<title>malloc (841,047 samples, 0.14%)</title><rect x="942.5" y="245" width="1.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="945.55" y="255.5" ></text>
</g>
<g >
<title>do_vmi_munmap (688,833 samples, 0.11%)</title><rect x="10.0" y="133" width="1.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>_int_free (731,398 samples, 0.12%)</title><rect x="246.6" y="245" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="249.61" y="255.5" ></text>
</g>
<g >
<title>wp_page_copy (1,236,623 samples, 0.20%)</title><rect x="13.6" y="165" width="2.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="16.65" y="175.5" ></text>
</g>
<g >
<title>bprm_execve (89,933 samples, 0.01%)</title><rect x="1189.8" y="261" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1192.83" y="271.5" ></text>
</g>
<g >
<title>_int_free (23,205,808 samples, 3.73%)</title><rect x="1095.3" y="245" width="44.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1098.32" y="255.5" >_int..</text>
</g>
<g >
<title>malloc (1,569,994 samples, 0.25%)</title><rect x="183.9" y="229" width="3.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="186.89" y="239.5" ></text>
</g>
<g >
<title>_int_free (6,512,105 samples, 1.05%)</title><rect x="697.6" y="213" width="12.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="700.63" y="223.5" ></text>
</g>
<g >
<title>mmap_region (1,236,703 samples, 0.20%)</title><rect x="11.3" y="85" width="2.3" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="14.31" y="95.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3,152,508 samples, 0.51%)</title><rect x="305.7" y="245" width="6.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="308.71" y="255.5" ></text>
</g>
<g >
<title>operator new (19,957,948 samples, 3.21%)</title><rect x="738.8" y="261" width="37.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="741.83" y="271.5" >ope..</text>
</g>
<g >
<title>Builder&lt;unsigned int&gt;::createBitVectorSIMD (50,824,816 samples, 8.16%)</title><rect x="90.5" y="277" width="96.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="93.54" y="287.5" >Builder&lt;uns..</text>
</g>
<g >
<title>x64_sys_call (688,833 samples, 0.11%)</title><rect x="10.0" y="309" width="1.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>Builder&lt;unsigned int&gt;::partitionVector (276,022,192 samples, 44.33%)</title><rect x="186.9" y="277" width="523.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="189.87" y="287.5" >Builder&lt;unsigned int&gt;::partitionVector</text>
</g>
<g >
<title>Builder&lt;unsigned int&gt;::countBinElements (4,795,472 samples, 0.77%)</title><rect x="81.5" y="277" width="9.0" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="84.45" y="287.5" ></text>
</g>
<g >
<title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;*&gt; (34,934,060 samples, 5.61%)</title><rect x="1073.1" y="277" width="66.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1076.09" y="287.5" >void st..</text>
</g>
</g>
</svg>
